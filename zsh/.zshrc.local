#!/bin/zsh

# Measures the time taken for GRML and for this file.
if [[ $ZSH_PROFILE_RC -gt 0 ]] ; then
    float GRML_PROFILE_END_TIME=${EPOCHREALTIME}
    float -gx GRML_PROFILE_ELAPSED_TIME=$(( \
        (GRML_PROFILE_END_TIME - GRML_PROFILE_START_TIME) * 1000 ))
    float -gx ZSHRC_PROFILE_START_TIME=${EPOCHREALTIME}
fi

autoload colors
if [[ "$terminfo[colors]" -gt 8 ]]; then
    colors
fi

function source-if-exists() {
    [[ -e "$1" ]] && source "$1"
}

function print-white() {
  echo "$fg[white]$1$reset_color"
}

function print-info() {
  print-white "$1"
}

function print-green() {
  echo "$fg[green]$1$reset_color"
}

function print-success() {
  local message="$1"
  print-green "ï€Œ  ${message}"
}

function print-red() {
  echo "$fg[red]$1$reset_color"
}

function print-error() {
  local message="$1"
  print-red "ERROR: ${message}"
}

# Fix binding for delete key.
bindkey '^[[P' delete-char

function setup-prompt() {
    source-if-exists "${ZDOTDIR}/prompts/pure-prompt"
    # Secondary prompt, printed when the shell needs more information to
    # complete a command.
    PS2='\`%_> '
    # Selection prompt used within a select loop.
    PS3='?# '
    # The execution trace prompt (setopt xtrace). default: '+%N:%i>'
    PS4='+%N:%i:%_> '
}

# Package Setup

# fzf is a general-purpose command-line fuzzy finder.
function setup-fzf() {
    local fzfPath="${HOME}/.dotfiles/vendor/fzf"
    path+="${fzfPath}/bin"
    manpath+="${fzfPath}/man"

    # Key bindings
    source-if-exists "${fzfPath}/shell/key-bindings.zsh"
}

# Setup PATH and completion for gcloud.
function setup-gcloud() {
  source-if-exists "${HOME}/google-cloud-sdk/path.zsh.inc"
  source-if-exists "${HOME}google-cloud-sdk/completion.zsh.inc"
}

function is-google-corp-computer() {
  if [[ $HOST == *corp.google.com ]]; then
    return 0
  else
    return 1
  fi
}

function setup-zsh-async() {
    # Don't autoload because we need it immediately for the prompt.
    source-if-exists "${HOME}/.dotfiles/vendor/zsh-async/async.zsh"
}

function z() {
  source "${HOME}/.dotfiles/vendor/z/z.sh"
  # Load the real z function which will overwrite this function with an alias.
  _z "$@"
}

function setup-tmux-package-manager() {
    local TPM_HOME="${HOME}/.tmux/plugins/tpm"
    if [[ ! -d "${TPM_HOME}" ]]; then
        print-error "tmux package manager (TPM) is not installed at ${TPM_HOME}"
    fi
}

# Tmux inside the st terminal doesn't like it when TERM isn't xterm-256 and
# won't properly display the background color.  fzf, on the other hand only
# likes TERM to screen-256color.  So, let TERM start as xterm-256color, but
# after tmux is started we can safely change TERM to screen-256color to appease
# fzf.
function setup-256-color-hack-for-fzf() {
  if [[ -n "$TMUX" ]]; then
    export TERM='screen-256color'
  fi
}

# Setup completion directories
fpath=(~/.zsh/completions ~/.zsh/functions $fpath)

# Autoload all shell functions from all directories in $fpath (following
# symlinks) that have the executable bit on (the executable bit is not
# necessary, but gives you an easy way to stop the autoloading of a particular
# shell function). $fpath should not be empty for this to work.
for func in $^fpath/*(N-.x:t); autoload $func

# Keyboard shortcuts

# Store the current command and use it as the inital text for following
# commands.
bindkey '^[q' push-input

setup-zsh-async
setup-prompt
setup-256-color-hack-for-fzf
setup-fzf
setup-gcloud
setup-tmux-package-manager

export DISABLE_AUTO_TITLE='true'

export MY_ZSH_SYSTEM_LOADED=''
source-if-exists "${HOME}/.zsh-system.zsh"

# Remove non-existent entries
rationalize-path manpath
rationalize-path path

if [[ $ZSH_PROFILE_RC -gt 0 ]] ; then
    float ZSHRC_PROFILE_END_TIME=${EPOCHREALTIME}
    float ZSHRC_ELAPSED_TIME=$(( \
        (ZSHRC_PROFILE_END_TIME - ZSHRC_PROFILE_START_TIME) * 1000 ))
    local grml_formatted_time=$(printf "%.0f" $GRML_PROFILE_ELAPSED_TIME)
    local zshrc_formatted_time=$(printf "%.0f" $ZSHRC_ELAPSED_TIME)
    print-info "GRML Load Time: ${grml_formatted_time}ms"
    print-info "ZSHRC Load Time: ${zshrc_formatted_time}ms"
    print-info "Type \`zprof | less\` to see detailed results."
fi
