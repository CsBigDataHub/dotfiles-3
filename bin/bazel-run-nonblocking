#!/bin/bash

USAGE='bazel-run-nonblocking [<blaze option>...] <target> [ -- [<target option>]... ]'
DESCRIPTION='
  Builds and runs the command generated by "bazel run" in the calling
  terminal. The command is run as a grandchild of the current shell,
  not from the Bazel server. Therefore, the program will have a controlling terminal, and
  the Bazel lock is released before running the command.'

function usage() {
  echo "$USAGE" "$DESCRIPTION" >&2
}

function die() {
  echo "$1"
  exit 1
}

function cleanup() {
  rm "$runcmd"
}

[ $# -gt 0 ] || { usage; exit 1; }

# Create a temporary script file, and register the cleanup handler that will
# delete it when we exit.
runcmd=$(mktemp /tmp/bazel-run.XXXXXX) || die "Could not create tmp file"
trap "cleanup" EXIT

startup_args=()
normal_args=("--script_path=$runcmd")
for arg in "$@"; do
  if [[ "$arg" == --startup_option=* ]]; then
    startup_args+=("${arg:17}")
  else
    normal_args+=("$arg")
  fi
done

# Execute the bazel phases up to and including the build phase, storing the
# resulting executable name in the temporary $runcmd script.
bazel "${startup_args[@]}" run "${normal_args[@]}" || exit $?
[ -x "$runcmd" ] || die "File $runcmd not executable"

# "Run" the resulting executable (outside of bazel).
"$runcmd"; exit
